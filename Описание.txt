1. Бинарный поиск
Поиск определенного значения в отсортированном массиве. Принцип следующий - В массиве из n элементов берется значение,
находящеееся на месте n/2 и сравнивается с заданным к поиску. Если ожидаемое значение больше, то n/2 стоновится новой 
левой границей, и повторно запускается поиск. Если число меньше, то n/2 становится новой верхней границей. Повторять 
пока не найдется исходное значение. Ассимптотическая сложность такого алгоритма равна O(log(n)).

def binary_search(num, min, max):
    while (min <= max):
        mid = int((min + max)/2)
        if num > mid:
            min = mid + 1
        if num < mid:
            max = mid - 1
        print(mid)
        if num == mid:
            print("your number = ", mid)
            return mid
    return None


binary_search(7, 0, 100)

2. Ассимптотические сложности алгоритмов.
Показывают сколько действий необходимо будет совершить, прежде чем будет найдено заданное значение. Если, например, это 
поэлементный поиск в массиве, то потребуется в худшем случае len(array) шагов или O(n). В случае если значение будет 1-м,
то также сложность обозначается O(n), поскольку перебор поэлементный. 
При бинарном поиске сложность доходит до O(log(n)), поскольку сначала список делится пополам, потом еще пополам, а это
логарифм двух и  O(log(n)) обозначает на самом деле  O(log2(n)).

3.Сортировка выбором
Проходим по списку, ищем самое большое (малое) значение и добавляем его в новый список. Сложность O(n*n).

def selection_sort(unsort_array):
    sort_array = []
    while len(unsort_array) > 0:
        i = 0
        min = unsort_array[0]
        while i < len(unsort_array):
            if unsort_array[i] < min:
                min = unsort_array[i]
            i+=1
        sort_array.append(min)
        unsort_array.remove(min)    
    return sort_array

print(selection_sort([1, 8, 6, 4, 15]))

4. Рекурсия
Характеризуется выбором базового случая, когда работа будет остановлена и основной логикой, а-ля если больше то
x если меньше то y. Вызовы функции помещаются на верх стека и работа с ними характеризуется по схеме LIFO. Последним
пришел и первым ушел.

def rec_binary_search(arr, num):
    mid = int(len(arr)/2)
    if arr[mid] == num: # базовый случай - когда найдено необходимое значение
        return arr[mid] 
    return rec_binary_search(arr[:mid-1], num) if arr[mid] > num else rec_binary_search(arr[mid +1:], num)

arr = [1, 2, 3, 4, 5, 6, 7, 8]
print(rec_binary_search(arr, 7))

5. Быстрая сортировка